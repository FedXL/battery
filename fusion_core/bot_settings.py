import requests
from bot.management.bot_core.handlers.bot_utils import bot_urls as U
from fusion_core.settings import BOT_TOKEN, fedor_id


def send_message(chat_id, text):
    url = f"https://api.telegram.org/bot{BOT_TOKEN}/sendMessage"
    data = {"chat_id": chat_id, "text": text, "parse_mode": "MarkdownV2"}
    response=requests.post(url, data=data)
    print(response.status_code)
    print(response.json())

def error_warning_handler(text):
    print('start parser')
    send_message(fedor_id, text)

def execute_task_handler(data: dict):
    print('START EXECUTE TASK HANDLER')
    TOKEN = BOT_TOKEN
    for key, value in data.items():
        text = (
            f"üîîüîîüîî <b>–î–µ–Ω—å –Ω–∞–π–¥–µ–Ω! ‚Ññ{key}</b> üîîüîîüîî\n\n"
            f"üî∏–î–∞—Ç–∞: <b>{value['find_day']}</b>.\n"
            f"üî∏–ù–∞–π–¥–µ–Ω–Ω—ã–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç: <b>{value['parser_coefficient']}</b>.\n\n"
            f"–î–µ—Ç–∞–ª–∏ –∑–∞–¥–∞–Ω–∏—è:\n"
            f"  üîπ–°–∫–ª–∞–¥: {value['warehouse_name']}.\n"
            f"  üîπ–¢–∏–ø –ø–æ—Å—Ç–∞–≤–∫–∏: {value['delivery_type']}.\n"
            f"  üîπ–ü–æ–∏—Å–∫ –±—ã–ª –æ—Å—É—â–µ—Å—Ç–≤–ª–µ–Ω –ø–æ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—É: {value['task_coefficient']} –∏ –º–µ–Ω–µ–µ.\n"
            f"  üîπ–ü–æ–∏—Å–∫ –±—ã–ª –æ—Å—É—â–µ—Å—Ç–≤–ª–µ–Ω –≤ —Ç–µ—á–µ–Ω–∏–µ —Å–ª–µ–¥—É—é—â–∏—Ö –¥–Ω–µ–π: {value['task_days']}.\n"
        )
        url = f"https://api.telegram.org/bot{TOKEN}/sendMessage"
        data = {
            "chat_id": value['telegram_id'],
            "text": text,
            "parse_mode": "HTML",
            "reply_markup": {
                "inline_keyboard": [[
                    {
                        "text": "–£–±—Ä–∞—Ç—å‚ò†Ô∏è",  # –¢–µ–∫—Å—Ç –≤–∞—à–µ–π –∫–Ω–æ–ø–∫–∏
                        "callback_data": "kill_myself"  # –î–∞–Ω–Ω—ã–µ –¥–ª—è –∫–æ–ª–±–µ–∫–∞
                    },
                    {
                        "text": "Go to Wildberries",
                        "url": "https://seller.wildberries.ru/supplies-management/all-supplies"
                    }
                ]]
            }
        }
        response_telegram = requests.post(url, json=data)
        if response_telegram.status_code == 200:
            print(f"Message sent to {value['telegram_id']}")
        else:
            print(f"Error sending message to {value['telegram_id']}")
        kill_day_or_task_success_handler(value=value)
    return None


def kill_day_or_task_success_handler(value):
    """1. –£–¥–∞–ª–∏—Ç—å –¥–µ–Ω—å –∏–∑ —Ç–∞—Å–∫–∏. –ü—Ä–∏ —ç—Ç–æ–º –µ—Å–ª–∏ –¥–Ω–µ–π –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ç–∞—Å–∫—É."""
    print('[SUCCESS KILLER] starting way')
    day_id = value['day_id']
    day = value['find_day']
    days: list = value['task_days']
    if day in days:
        days.remove(day)
    print(days,len(days))
    if len(days) == 0:
        print("[SUCCESS KILLER] we need to kill task")
        response_django = requests.delete(U.URL_TASK + f"{value['task_id']}/?client={value['telegram_id']}")
        print('RESPONSE', response_django.status_code)
        if response_django.status_code == 204:
            print('ok success message ')
            kill_task_send_message_positive(value)
        else:
            print(f"Error deleting task {value['task_id']}")
    else:
        print('–û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π', len(days), days)
        print(len(days), days)
        url = U.URL_TASK_DATES + f"{day_id}/"
        print(url)
        response_django = requests.delete(url=url)
        if response_django.status_code == 204:
            print(f"Day was deleted")
        else:
            print(response_django.status_code)
            print(f"Error deleting day")


def kill_task_send_message_positive(value):
    """–ü–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è —Ç–∞—Å–∫–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º —á—Ç–æ —Ç–∞—Å–∫–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—Ç—Ä–∞–±–æ—Ç–∞–ª–∞"""
    TOKEN = BOT_TOKEN
    text = (f"üÜóüîîüÜó <b>–ó–∞–¥–∞–Ω–∏–µ ‚Ññ{value['task_id']}</b> üÜóüîîüÜó\n\n"
            f"üî∏–ó–∞–¥–∞–Ω–∏–µ –±—ã–ª–æ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ. –í—Å–µ –¥–Ω–∏ –¥–æ—Å—Ç–∞–≤–∫–∏ –±—ã–ª–∏ –Ω–∞–π–¥–µ–Ω—ã.\n\n"
            f"–î–µ—Ç–∞–ª–∏ –∑–∞–¥–∞–Ω–∏—è:\n"
            f"  üîπ–°–∫–ª–∞–¥: {value['warehouse_name']}.\n"
            f"  üîπ–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç: {value['task_coefficient']}.\n")
    url = f"https://api.telegram.org/bot{TOKEN}/sendMessage"

    data = {
        "chat_id": value['telegram_id'],
        "text": text,
        "parse_mode": "HTML",
        "reply_markup": {
            "inline_keyboard": [[
                {
                    "text": "–£–±—Ä–∞—Ç—å‚ò†Ô∏è",
                    "callback_data": "kill_myself"
                }
            ]]
        }
    }
    response_telegram = requests.post(url, json=data)
    if response_telegram.status_code == 200:
        print(f"Message sent to {value['telegram_id']}")
    else:
        print(f"Error sending message to {value['telegram_id']}")


def failed_task_handler(income_data: dict, warehouse_name: str) -> tuple:
    print('start filed message handler')
    TOKEN = BOT_TOKEN
    text = (
        f"‚ùåüîî‚ùå <b>–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å ‚Ññ{income_data['id']}</b> ‚ùåüîî‚ùå\n\n"
        f"–°–ª–æ—Ç —Å–∫–ª–∞–¥–∞ —Å —Ç–µ–∫—É—â–∏–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –∑–∞–¥–∞–Ω–∏—è –Ω–µ –±—ã–ª –Ω–∞–π–¥–µ–Ω.\n\n"
        f"–î–µ—Ç–∞–ª–∏ –∑–∞–¥–∞–Ω–∏—è:\n"
        f"  –°–∫–ª–∞–¥: {warehouse_name}.\n"
        f"  –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç: {income_data['find_coefficient']} –Ω–µ –±—ã–ª –Ω–∞–π–¥–µ–Ω.\n"
    )
    url = f"https://api.telegram.org/bot{TOKEN}/sendMessage"
    data = {
        "chat_id": income_data['client'],
        "text": text,
        "parse_mode": "HTML",
        "reply_markup": {
            "inline_keyboard": [[
                {
                    "text": "–£–±—Ä–∞—Ç—å‚ò†Ô∏è",
                    "callback_data": "kill_myself"
                }
            ]]
        }
    }
    response_telegram = requests.post(url, json=data)
    if response_telegram.status_code == 200:
        print(f"Message sent to {income_data['client']}")
    else:
        print(f"Error sending message to {income_data['client']}")
    response_django = requests.delete(U.URL_TASK + f"{income_data['id']}/?client={income_data['client']}")
    if response_django.status_code == 204:
        print(f"Task {income_data['id']} deleted")
    else:
        print(f"Error deleting task {income_data['id']}")
    return response_telegram, response_django
